Sub ResumerCCI()

    Dim FileNameCCI As String, FileNamePortefeuille As String
    Dim wbSource As Workbook, wbPortefeuille As Workbook, wbTarget As Workbook
    Dim wsEnt As Worksheet, wsDir As Worksheet, wsGar As Worksheet, wsAss As Worksheet, wsBaseCA As Worksheet, wsTarget As Worksheet
    Dim dictEnt As Object, dictDir As Object, dictGar As Object, dictMont As Object, dictAss As Object, dictSoc As Object
    Dim dictHom As Object
    Dim lastRowEnt As Long, lastRowDir As Long, lastRowGar As Long, lastRowAss As Long, lastRowBaseCA As Long
    Dim i As Long, j As Long
    Dim key As Variant, valeur As Variant, montant As Variant
    Dim colSIREN As Long, colSOC As Long

    ' Ajouts pour feuille ComparatifDirigeants
    Dim wsComp As Worksheet
    Dim FileNameOldCCI As String
    Dim wbOld As Workbook
    Dim wsEntOld As Worksheet, wsDirOld As Worksheet, wsGarOld As Worksheet, wsAssOld As Worksheet
    Dim lastRowEntOld As Long, lastRowDirOld As Long, lastRowGarOld As Long, lastRowAssOld As Long
    Dim dictEntOld As Object, dictDirOld As Object, dictGarOld As Object, dictMontOld As Object
    Dim dictDirSocCount As Object, dictDirTotalGF As Object, dictDirGarantFreq As Object
    Dim dictOldDirSocCount As Object, dictOldDirTotalGF As Object
    Dim allDirNames As Object
    Dim hasOld As Boolean
    Dim dirName As String, garantName As String
    Dim subDict As Object
    Dim maxCount As Long
    Dim maxGarant As String
    Dim rowIndex As Long
    Dim dirKey As String, dirDisplay As String, canonKey As String
    Dim oldCanonKey As String

    ' Dictionnaires pour sélection déterministe du dirigeant principal par ID
    Dim dictDirPrimary As Object, dictDirPrimaryKeyMap As Object
    Dim dictOldDirPrimary As Object, dictOldDirPrimaryKeyMap As Object
    ' Map clé canonique -> libellé d'affichage
    Dim dirKeyToDisplay As Object
    ' Maps ID -> set de dirigeants (tous) pour agrégations par dirigeant
    Dim dictAllDirByID As Object, dictOldAllDirByID As Object
    Dim dirCanon As String

    ' Étape 1 : Ouvrir explorateur pour sélectionner le fichier source CCI
    FileNameCCI = Application.GetOpenFilename("Fichiers Excel (*.xlsx; *.xlsm; *.xls), *.xlsx; *.xlsm; *.xls", , "Sélectionnez le nouveau fichier CCI")
    If FileNameCCI = "False" Then Exit Sub
    Set wbSource = workbooks.Open(FileNameCCI)

    ' Feuilles source
    Set wsEnt = wbSource.Sheets("Entreprise")
    Set wsDir = wbSource.Sheets("Dirigeant")
    Set wsGar = wbSource.Sheets("Garant")
    Set wsAss = wbSource.Sheets("Assureur")

    ' Dernières lignes
    lastRowEnt = wsEnt.Cells(wsEnt.Rows.Count, 1).End(xlUp).Row
    lastRowDir = wsDir.Cells(wsDir.Rows.Count, 1).End(xlUp).Row
    lastRowGar = wsGar.Cells(wsGar.Rows.Count, 1).End(xlUp).Row
    lastRowAss = wsAss.Cells(wsAss.Rows.Count, 1).End(xlUp).Row

    ' Créer les dictionnaires
    Set dictEnt = CreateObject("Scripting.Dictionary")
    Set dictDir = CreateObject("Scripting.Dictionary")
    Set dictGar = CreateObject("Scripting.Dictionary")
    Set dictMont = CreateObject("Scripting.Dictionary")
    Set dictAss = CreateObject("Scripting.Dictionary")
    Set dictHom = CreateObject("Scripting.Dictionary")

    ' Remplacements pour homonymes (ajoutez/modifiez manuellement ici)
    With dictHom
        .Add "GAL", "GALIAN-SMABTP"
        .Add "GAILIAN", "GALIAN-SMABTP"
        .Add "MMA", "MMA"
        .Add "ALLIANZ", "ALLIANZ"
        .Add "AXA", "AXA"
        .Add "SO C", "SOCAF"
        .Add "SO.", "SOCAF"
        .Add "SOCA", "SOCAF"
        .Add "SOCIETE DE CAUTION", "SOCAF"
        .Add "SOCIÉTÉ DE CAUTION", "SOCAF"
        .Add "QBE", "QBE"
        .Add "GROUPAMA", "GROUPAMA"
        .Add "GENERALI", "GENERALI"
        .Add "CEGC", "CEGC"
        .Add "COMPAGNIE EUR", "CEGC"
        .Add "COMPANIE EUR", "CEGC"
        .Add "LLOYD", "LLOYDS"
        .Add "GROUPEMENT FRANCAIS", "GFC"
        .Add "GFC", "GFC"
        .Add "SMA", "GALIAN-SMABTP"
        .Add "CIC", "CIC"
        .Add "CREDIT IND", "CIC"
        .Add "CAISSE FEDERALE", "CREDIT MUTUEL"
        .Add " LACAISSE FEDERALE", "CREDIT MUTUEL"
        .Add "CAISSE R", "CREDIT AGRICOLE"
        .Add "(CAMCA", "CREDIT AGRICOLE"
        .Add "CREDIT AGRICOLE", "CREDIT AGRICOLE"
        .Add "CAISSE D'ASSURANCES MUTUELLES DU CREDIT AGRICOLE", "CREDIT AGRICOLE"
        .Add "CAISSE D'EPARGNE", "CAISSE D'EPARGNE"
    End With

    ' Map entreprises (Société = Dénomination en colonne 9)
    For i = 2 To lastRowEnt
        key = CanonicalId(wsEnt.Cells(i, 1).Value)
        If Not dictEnt.Exists(key) Then
            dictEnt.Add key, Array(wsEnt.Cells(i, 10).Value, wsEnt.Cells(i, 8).Value)  ' Société, SIREN
        End If
    Next i

    ' Map dirigeants (sélection déterministe du dirigeant principal par ID) et ensemble complet par ID
    Set dictDirPrimary = CreateObject("Scripting.Dictionary")
    Set dictDirPrimaryKeyMap = CreateObject("Scripting.Dictionary")
    Set dictAllDirByID = CreateObject("Scripting.Dictionary")
    Set dirKeyToDisplay = CreateObject("Scripting.Dictionary")
    For i = 2 To lastRowDir
        key = CanonicalId(wsDir.Cells(i, 2).Value)
        dirDisplay = NormalizeDisplayName(wsDir.Cells(i, 3).Value, wsDir.Cells(i, 5).Value)
        canonKey = CanonicalKeyFromDisplay(dirDisplay)
        If Len(canonKey) > 0 Then
            If Not dictDirPrimary.Exists(key) Then
                dictDirPrimary.Add key, dirDisplay
                dictDirPrimaryKeyMap.Add key, canonKey
            Else
                If canonKey < dictDirPrimaryKeyMap(key) Then
                    dictDirPrimary(key) = dirDisplay
                    dictDirPrimaryKeyMap(key) = canonKey
                End If
            End If

            ' Enregistrer tous les dirigeants par ID (set par clé canonique)
            If Not dictAllDirByID.Exists(key) Then Set dictAllDirByID(key) = CreateObject("Scripting.Dictionary")
            If Not dictAllDirByID(key).Exists(canonKey) Then
                dictAllDirByID(key).Add canonKey, dirDisplay
            End If
            If Not dirKeyToDisplay.Exists(canonKey) Then dirKeyToDisplay.Add canonKey, dirDisplay
        End If
    Next i

    ' Map garants et montants
    For i = 2 To lastRowGar
        key = CanonicalId(wsGar.Cells(i, 2).Value) ' Identifiant
        Dim nomGarant As String
        nomGarant = UCase(wsGar.Cells(i, 3).Value) ' Nom du garant à normaliser
    
        ' Appliquer remplacement par recherche de mot-clé partiel
        For Each cleHom In dictHom.Keys
            If InStr(1, nomGarant, cleHom, vbTextCompare) > 0 Then
                nomGarant = dictHom(cleHom)
                Exit For
            End If
        Next cleHom
    
        ' Stocke unique (premier trouvé après remplacement)
        If Not dictGar.Exists(key) Then
            dictGar.Add key, nomGarant
        End If
    
        ' Initialiser le montant si nécessaire
        If Not dictMont.Exists(key) Then dictMont.Add key, 0
    
        ' Traitement du montant
        montant = wsGar.Cells(i, 5).Value
        If IsNumeric(montant) Then
            dictMont(key) = dictMont(key) + CDbl(montant)
        End If
    Next i

    ' Map assureurs (ne garder que le premier)
    For i = 2 To lastRowAss
        key = CanonicalId(wsAss.Cells(i, 2).Value)
        valeur = wsAss.Cells(i, 3).Value
        If Not dictAss.Exists(key) Then
            dictAss.Add key, valeur
        End If
        ' Sinon on ignore les suivants
    Next i

    ' Étape 2 : Ouvrir explorateur pour sélectionner le fichier portefeuille
    FileNamePortefeuille = Application.GetOpenFilename("Fichiers Excel (*.xlsx; *.xlsm; *.xls), *.xlsx; *.xlsm; *.xls", , "Sélectionnez le fichier portefeuille client")
    If FileNamePortefeuille = "False" Then
        MsgBox "Aucun fichier portefeuille sélectionné. N° sociétaire restera vide."
    Else
        Set wbPortefeuille = workbooks.Open(FileNamePortefeuille)
        Set wsBaseCA = wbPortefeuille.Sheets("Base CA")
        lastRowBaseCA = wsBaseCA.Cells(wsBaseCA.Rows.Count, 1).End(xlUp).Row

        ' Trouver colonnes SOC et SIREN
        colSOC = 0: colSIREN = 0
        For i = 1 To wsBaseCA.Cells(1, Columns.Count).End(xlToLeft).Column
            If UCase(Trim(wsBaseCA.Cells(1, i).Value)) = "SOC" Then colSOC = i
            If UCase(Trim(wsBaseCA.Cells(1, i).Value)) = "SIREN" Then colSIREN = i
        Next i

        If colSOC = 0 Or colSIREN = 0 Then
            MsgBox "Colonnes 'SOC' ou 'SIREN' non trouvées dans 'Base CA'. N° sociétaire restera vide."
        Else
            Set dictSoc = CreateObject("Scripting.Dictionary")
            For i = 2 To lastRowBaseCA
                key = CanonicalId(wsBaseCA.Cells(i, colSIREN).Value)
                If Not dictSoc.Exists(key) Then
                    dictSoc.Add key, wsBaseCA.Cells(i, colSOC).Value
                End If
            Next i
        End If
        wbPortefeuille.Close SaveChanges:=False
    End If

    ' Créer et ouvrir un nouveau classeur pour le résumé
    Set wbTarget = workbooks.Add
    Set wsTarget = wbTarget.Sheets(1)
    wsTarget.Name = "ResumeCCI"
    wsTarget.Cells(1, 1).Resize(1, 8).Value = Array("ID", "N° sociétaire", "Société", "SIREN", "Dirigeant", "Garant", "Montant GF", "Assureur")

    ' Remplir les données
    j = 2
    For Each key In dictEnt.Keys
        wsTarget.Cells(j, 1).Value = key
        wsTarget.Cells(j, 4).Value = dictEnt(key)(1)  ' SIREN
        Dim sirenKey As String
        sirenKey = CanonicalId(wsTarget.Cells(j, 4).Value)
        If Not dictSoc Is Nothing And dictSoc.Exists(sirenKey) Then
            wsTarget.Cells(j, 2).Value = dictSoc(sirenKey)  ' N° sociétaire
        Else
            wsTarget.Cells(j, 2).Value = "NA"
        End If
        wsTarget.Cells(j, 3).Value = dictEnt(key)(0)  ' Société
        If dictDirPrimary.Exists(key) Then wsTarget.Cells(j, 5).Value = dictDirPrimary(key)
        If dictGar.Exists(key) Then wsTarget.Cells(j, 6).Value = dictGar(key)
        If dictMont.Exists(key) Then wsTarget.Cells(j, 7).Value = dictMont(key)
        If dictAss.Exists(key) Then wsTarget.Cells(j, 8).Value = dictAss(key)
        j = j + 1
    Next

    ' Mise en forme de tableau
    Dim tblRange As Range
    Set tblRange = wsTarget.Range("A1").CurrentRegion
    wsTarget.ListObjects.Add(xlSrcRange, tblRange, , xlYes).Name = "TableauResume"

    ' Centrer colonnes B (N° sociétaire) et D (SIREN)
    wsTarget.Columns("B:B").HorizontalAlignment = xlCenter
    wsTarget.Columns("D:D").HorizontalAlignment = xlCenter

    ' Format comptabilité pour colonne G (Montant GF)
    wsTarget.Columns("G:G").NumberFormat = "#,##0, ""K€"""

    wsTarget.Columns.AutoFit

    ' ==============================
    ' Construire la feuille ComparatifDirigeants
    ' ==============================

    ' Agrégats actuels par dirigeant (comptes, montants, garant principal) en considérant TOUS les dirigeants par société
    Set dictDirSocCount = CreateObject("Scripting.Dictionary")
    Set dictDirTotalGF = CreateObject("Scripting.Dictionary")
    Set dictDirGarantFreq = CreateObject("Scripting.Dictionary") ' canonDir -> (Garant -> Count)

    For Each key In dictEnt.Keys
        If dictAllDirByID.Exists(key) Then
            For Each dirCanon In dictAllDirByID(key).Keys
                dirDisplay = dictAllDirByID(key)(dirCanon)
                If Not dirKeyToDisplay.Exists(dirCanon) Then dirKeyToDisplay.Add dirCanon, dirDisplay

                If Not dictDirSocCount.Exists(dirCanon) Then dictDirSocCount.Add dirCanon, 0
                dictDirSocCount(dirCanon) = dictDirSocCount(dirCanon) + 1

                If Not dictDirTotalGF.Exists(dirCanon) Then dictDirTotalGF.Add dirCanon, 0#
                If dictMont.Exists(key) Then
                    If IsNumeric(dictMont(key)) Then dictDirTotalGF(dirCanon) = CDbl(dictDirTotalGF(dirCanon)) + CDbl(dictMont(key))
                End If

                If Not dictDirGarantFreq.Exists(dirCanon) Then Set dictDirGarantFreq(dirCanon) = CreateObject("Scripting.Dictionary")
                If dictGar.Exists(key) Then
                    garantName = CStr(dictGar(key))
                    If Not dictDirGarantFreq(dirCanon).Exists(garantName) Then dictDirGarantFreq(dirCanon).Add garantName, 0
                    dictDirGarantFreq(dirCanon)(garantName) = dictDirGarantFreq(dirCanon)(garantName) + 1
                End If
            Next dirCanon
        End If
    Next key

    ' Agrégats anciens (optionnels) par dirigeant
    hasOld = False
    FileNameOldCCI = Application.GetOpenFilename("Fichiers Excel (*.xlsx; *.xlsm; *.xls), *.xlsx; *.xlsm; *.xls", , "Sélectionnez l'ancien fichier CCI (optionnel)")
    If Not (FileNameOldCCI = "False") Then
        On Error Resume Next
        Set wbOld = Workbooks.Open(FileNameOldCCI)
        On Error GoTo 0
        If Not wbOld Is Nothing Then
            hasOld = True

            ' Feuilles source anciennes
            Set wsEntOld = wbOld.Sheets("Entreprise")
            Set wsDirOld = wbOld.Sheets("Dirigeant")
            Set wsGarOld = wbOld.Sheets("Garant")
            Set wsAssOld = wbOld.Sheets("Assureur")

            lastRowEntOld = wsEntOld.Cells(wsEntOld.Rows.Count, 1).End(xlUp).Row
            lastRowDirOld = wsDirOld.Cells(wsDirOld.Rows.Count, 1).End(xlUp).Row
            lastRowGarOld = wsGarOld.Cells(wsGarOld.Rows.Count, 1).End(xlUp).Row
            lastRowAssOld = wsAssOld.Cells(wsAssOld.Rows.Count, 1).End(xlUp).Row

            ' Dictionnaires anciens
            Set dictEntOld = CreateObject("Scripting.Dictionary")
            Set dictDirOld = CreateObject("Scripting.Dictionary")
            Set dictGarOld = CreateObject("Scripting.Dictionary")
            Set dictMontOld = CreateObject("Scripting.Dictionary")

            ' Map entreprises anciennes
            For i = 2 To lastRowEntOld
                key = CanonicalId(wsEntOld.Cells(i, 1).Value)
                If Not dictEntOld.Exists(key) Then
                    dictEntOld.Add key, Array(wsEntOld.Cells(i, 10).Value, wsEntOld.Cells(i, 8).Value) ' Société, SIREN
                End If
            Next i

            ' Map dirigeants anciens (tous par ID)
            Set dictOldAllDirByID = CreateObject("Scripting.Dictionary")
            For i = 2 To lastRowDirOld
                key = CanonicalId(wsDirOld.Cells(i, 2).Value)
                dirDisplay = NormalizeDisplayName(wsDirOld.Cells(i, 3).Value, wsDirOld.Cells(i, 5).Value)
                canonKey = CanonicalKeyFromDisplay(dirDisplay)
                If Len(canonKey) > 0 Then
                    If Not dictOldAllDirByID.Exists(key) Then Set dictOldAllDirByID(key) = CreateObject("Scripting.Dictionary")
                    If Not dictOldAllDirByID(key).Exists(canonKey) Then dictOldAllDirByID(key).Add canonKey, dirDisplay
                    If Not dirKeyToDisplay.Exists(canonKey) Then dirKeyToDisplay.Add canonKey, dirDisplay
                End If
            Next i

            ' Map garants et montants anciens (avec mêmes homonymes)
            For i = 2 To lastRowGarOld
                key = CanonicalId(wsGarOld.Cells(i, 2).Value)
                Dim oldGarant As String
                oldGarant = UCase(wsGarOld.Cells(i, 3).Value)

                For Each cleHom In dictHom.Keys
                    If InStr(1, oldGarant, cleHom, vbTextCompare) > 0 Then
                        oldGarant = dictHom(cleHom)
                        Exit For
                    End If
                Next cleHom

                If Not dictGarOld.Exists(key) Then dictGarOld.Add key, oldGarant
                If Not dictMontOld.Exists(key) Then dictMontOld.Add key, 0

                montant = wsGarOld.Cells(i, 5).Value
                If IsNumeric(montant) Then dictMontOld(key) = dictMontOld(key) + CDbl(montant)
            Next i

            ' (Assureurs anciens non nécessaires pour ce comparatif)

            ' Agrégats anciens par dirigeant (tous dirigeants par société)
            Set dictOldDirSocCount = CreateObject("Scripting.Dictionary")
            Set dictOldDirTotalGF = CreateObject("Scripting.Dictionary")

            For Each key In dictEntOld.Keys
                If Not dictOldAllDirByID Is Nothing Then
                    If dictOldAllDirByID.Exists(key) Then
                        For Each dirCanon In dictOldAllDirByID(key).Keys
                            If Not dictOldDirSocCount.Exists(dirCanon) Then dictOldDirSocCount.Add dirCanon, 0
                            dictOldDirSocCount(dirCanon) = dictOldDirSocCount(dirCanon) + 1

                            If Not dictOldDirTotalGF.Exists(dirCanon) Then dictOldDirTotalGF.Add dirCanon, 0#
                            If dictMontOld.Exists(key) Then
                                If IsNumeric(dictMontOld(key)) Then dictOldDirTotalGF(dirCanon) = CDbl(dictOldDirTotalGF(dirCanon)) + CDbl(dictMontOld(key))
                            End If
                        Next dirCanon
                    End If
                End If
            Next key

            wbOld.Close SaveChanges:=False
        End If
    End If

    ' Construire l'ensemble des dirigeants (union actuel + ancien si présent)
    Set allDirNames = CreateObject("Scripting.Dictionary")
    If Not dictDirSocCount Is Nothing Then
        For Each key In dictDirSocCount.Keys
            If Not allDirNames.Exists(key) Then allDirNames.Add key, True
        Next key
    End If
    If hasOld Then
        If Not dictOldDirSocCount Is Nothing Then
            For Each key In dictOldDirSocCount.Keys
                If Not allDirNames.Exists(key) Then allDirNames.Add key, True
            Next key
        End If
    End If

    ' Créer la feuille de comparatif
    Set wsComp = wbTarget.Sheets.Add(After:=wsTarget)
    wsComp.Name = "ComparatifDirigeants"
    wsComp.Cells(1, 1).Resize(1, 6).Value = Array("Dirigeant", "Total sociétés", "Garant principal", "Mouvement société", "Montant total GF", "Mouvement GF")

    ' Remplir les données ligne à ligne
    rowIndex = 2
    For Each key In allDirNames.Keys
        dirName = CStr(key)

        ' Total sociétés actuel
        Dim currSoc As Long
        Dim oldSoc As Long
        Dim currGF As Double
        Dim oldGF As Double
        Dim mouvementSoc As Long
        Dim mouvementGF As Double

        If dictDirSocCount.Exists(dirName) Then currSoc = CLng(dictDirSocCount(dirName)) Else currSoc = 0
        If hasOld And Not dictOldDirSocCount Is Nothing Then
            If dictOldDirSocCount.Exists(dirName) Then oldSoc = CLng(dictOldDirSocCount(dirName)) Else oldSoc = 0
        Else
            oldSoc = 0
        End If
        mouvementSoc = currSoc - oldSoc

        If dictDirTotalGF.Exists(dirName) Then currGF = CDbl(dictDirTotalGF(dirName)) Else currGF = 0#
        If hasOld And Not dictOldDirTotalGF Is Nothing Then
            If dictOldDirTotalGF.Exists(dirName) Then oldGF = CDbl(dictOldDirTotalGF(dirName)) Else oldGF = 0#
        Else
            oldGF = 0#
        End If
        mouvementGF = currGF - oldGF

        ' Garant principal actuel (par fréquence)
        maxCount = -1
        maxGarant = ""
        If dictDirGarantFreq.Exists(dirName) Then
            Set subDict = dictDirGarantFreq(dirName)
            For Each valeur In subDict.Keys
                If subDict(valeur) > maxCount Or (subDict(valeur) = maxCount And (maxGarant = "" Or CStr(valeur) < maxGarant)) Then
                    maxCount = subDict(valeur)
                    maxGarant = CStr(valeur)
                End If
            Next valeur
        End If

        ' Affichage du nom du dirigeant à partir de la clé canonique
        If dirKeyToDisplay.Exists(dirName) Then
            wsComp.Cells(rowIndex, 1).Value = dirKeyToDisplay(dirName)
        Else
            wsComp.Cells(rowIndex, 1).Value = dirName
        End If
        wsComp.Cells(rowIndex, 2).Value = currSoc
        wsComp.Cells(rowIndex, 3).Value = maxGarant
        wsComp.Cells(rowIndex, 4).Value = mouvementSoc
        wsComp.Cells(rowIndex, 5).Value = currGF
        wsComp.Cells(rowIndex, 6).Value = mouvementGF

        rowIndex = rowIndex + 1
    Next key

    ' Mise en forme tableau
    Dim compRange As Range
    Set compRange = wsComp.Range("A1").CurrentRegion
    wsComp.ListObjects.Add(xlSrcRange, compRange, , xlYes).Name = "TableauComparatifDirigeants"

    ' Formats
    wsComp.Columns("B:B").NumberFormat = "0"                    ' Total sociétés
    wsComp.Columns("D:D").NumberFormat = "0"                    ' Mouvement société
    wsComp.Columns("E:E").NumberFormat = "#,##0, ""K€"""       ' Montant total GF
    wsComp.Columns("F:F").NumberFormat = "#,##0, ""K€"""       ' Mouvement GF

    ' Alignements
    wsComp.Columns("B:B").HorizontalAlignment = xlCenter
    wsComp.Columns("D:D").HorizontalAlignment = xlCenter

    ' Mise en forme conditionnelle pour mouvements
    Dim lastRowComp As Long
    lastRowComp = wsComp.Cells(wsComp.Rows.Count, 1).End(xlUp).Row
    If lastRowComp >= 2 Then
        Dim rngMovSoc As Range, rngMovGF As Range
        Set rngMovSoc = wsComp.Range("D2:D" & lastRowComp)
        Set rngMovGF = wsComp.Range("F2:F" & lastRowComp)

        ' Mouvement société: >0 vert, <0 rouge
        With rngMovSoc.FormatConditions.Add(Type:=xlCellValue, Operator:=xlGreater, Formula1:="0")
            .Interior.Color = RGB(198, 239, 206) ' vert léger
            .Font.Color = RGB(0, 97, 0)
        End With
        With rngMovSoc.FormatConditions.Add(Type:=xlCellValue, Operator:=xlLess, Formula1:="0")
            .Interior.Color = RGB(255, 199, 206) ' rouge léger
            .Font.Color = RGB(156, 0, 6)
        End With

        ' Mouvement GF: >0 vert, <0 rouge
        With rngMovGF.FormatConditions.Add(Type:=xlCellValue, Operator:=xlGreater, Formula1:="0")
            .Interior.Color = RGB(198, 239, 206)
            .Font.Color = RGB(0, 97, 0)
        End With
        With rngMovGF.FormatConditions.Add(Type:=xlCellValue, Operator:=xlLess, Formula1:="0")
            .Interior.Color = RGB(255, 199, 206)
            .Font.Color = RGB(156, 0, 6)
        End With
    End If

    wsComp.Columns.AutoFit

    wbTarget.Activate  ' Active le nouveau classeur
    MsgBox "Résumé et comparatif créés et ouverts dans un nouveau classeur."
    wbSource.Close SaveChanges:=False

End Sub

Private Function NormalizeDisplayName(ByVal lastName As Variant, ByVal firstName As Variant) As String
    Dim ln As String, fn As String
    ln = Trim(CStr(lastName))
    fn = Trim(CStr(firstName))

    If Len(ln) = 0 And Len(fn) = 0 Then
        NormalizeDisplayName = ""
        Exit Function
    End If

    If Len(fn) > 0 Then
        On Error Resume Next
        fn = Application.WorksheetFunction.Proper(LCase(fn))
        If Err.Number <> 0 Then
            Err.Clear
            On Error GoTo 0
            fn = UCase(Left$(fn, 1)) & LCase(Mid$(fn, 2))
        Else
            On Error GoTo 0
        End If
        NormalizeDisplayName = UCase(ln) & " " & fn
    Else
        NormalizeDisplayName = UCase(ln)
    End If
End Function

Private Function CanonicalKeyFromDisplay(ByVal displayName As String) As String
    Dim t As String
    t = UCase(Trim(displayName))
    t = ReplaceAccents(t)
    t = Replace(t, " ", "")
    t = Replace(t, "-", "")
    t = Replace(t, "'", "")
    t = Replace(t, ".", "")
    t = Replace(t, ",", "")
    t = Replace(t, "_", "")
    t = Replace(t, "(", "")
    t = Replace(t, ")", "")
    t = Replace(t, "/", "")
    t = Replace(t, "\", "")
    CanonicalKeyFromDisplay = t
End Function

Private Function ReplaceAccents(ByVal s As String) As String
    Dim r As String
    r = s
    ' A
    r = Replace(r, "Á", "A"): r = Replace(r, "À", "A"): r = Replace(r, "Â", "A"): r = Replace(r, "Ä", "A"): r = Replace(r, "Ã", "A"): r = Replace(r, "Å", "A")
    ' E
    r = Replace(r, "É", "E"): r = Replace(r, "È", "E"): r = Replace(r, "Ê", "E"): r = Replace(r, "Ë", "E")
    ' I
    r = Replace(r, "Í", "I"): r = Replace(r, "Ì", "I"): r = Replace(r, "Î", "I"): r = Replace(r, "Ï", "I")
    ' O
    r = Replace(r, "Ó", "O"): r = Replace(r, "Ò", "O"): r = Replace(r, "Ô", "O"): r = Replace(r, "Ö", "O"): r = Replace(r, "Õ", "O")
    ' U
    r = Replace(r, "Ú", "U"): r = Replace(r, "Ù", "U"): r = Replace(r, "Û", "U"): r = Replace(r, "Ü", "U")
    ' Y
    r = Replace(r, "Ý", "Y"): r = Replace(r, "Ÿ", "Y")
    ' C
    r = Replace(r, "Ç", "C")
    ' Special digraphs
    r = Replace(r, "Œ", "OE"): r = Replace(r, "Æ", "AE")
    ReplaceAccents = r
End Function

Private Function CanonicalId(ByVal v As Variant) As String
    Dim s As String
    On Error Resume Next
    s = CStr(v)
    On Error GoTo 0
    If Len(s) = 0 Then
        CanonicalId = ""
        Exit Function
    End If
    ' Normaliser espaces classiques et insécables
    s = Replace(s, Chr$(160), " ")
    s = Trim$(s)
    CanonicalId = s
End Function
